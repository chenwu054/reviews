/* package whatever; // don't place package name! */

import java.io.*;
import java.util.*;

class myCode
{
    public static void main (String[] args) throws java.lang.Exception
    {
        System.out.println("Hello Java");
        additionTest();

        posPosTest();
        negNegTest();
        posNegTest();
        negPosTest();
        zeroTest();
    }
    public static void additionTest() {
        BigInt a = new BigInt();
        a.num.add(99);
        a.num.add(2); // 200000099
        BigInt b = new BigInt();
        b.num.add(2);
        b.num.add(1);
        BigInt ret = a.addPos(b);
        System.out.println(ret);
    }
    public static void addition2Test() {
        BigInt a = new BigInt();
        a.num.add(99);
        a.num.add(2); // 200000099
        BigInt b = new BigInt();
        b.num.add(2);
        b.num.add(1); // 1000002
        b.neg = true;
        BigInt ret = a.add(b);
        System.out.println(ret);
    }
    public static void posPosTest() {
        System.out.println("-----pos pos test----");
        BigInt a = new BigInt();
        a.num.add(99);
        a.num.add(2); // 200000099
        BigInt b = new BigInt();
        b.num.add(2);
        b.num.add(1); // 1000002
        BigInt ret = a.add(b);
        System.out.println(ret);
    }
    public static void negNegTest() {
        System.out.println("-----neg neg test----");
        BigInt a = new BigInt();
        a.num.add(Integer.MAX_VALUE-1);
        a.num.add(2); // 200000099
        a.neg=true;
        BigInt b = new BigInt();
        b.num.add(2);
        b.num.add(1); // 1000002
        b.neg = true;
        BigInt ret = a.add(b);
        System.out.println(ret);
    }
    public static void posNegTest() {
        System.out.println("-----posNeg test----");
        BigInt a = new BigInt();
        a.num.add(1);
        a.num.add(2); // 20000001
        BigInt b = new BigInt();
        b.num.add(2);
        b.num.add(1); // -100000002
        b.neg = true;
        BigInt ret = a.add(b);
        System.out.println(ret);
    }
    public static void negPosTest() {
        System.out.println("-----negPos test----");
        BigInt a = new BigInt();
        a.num.add(2);
        a.num.add(1); // 1000000002
        BigInt b = new BigInt();
        b.num.add(1);
        b.num.add(2); // -2000000001
        b.neg = true;
        BigInt ret = a.add(b);
        System.out.println(ret);
    }
    public static void zeroTest() {
        System.out.println("-----zero test----");
        BigInt a = new BigInt();
        a.num.add(2);
        a.num.add(3); // 200000099
        a.num.add(76); // 200000099
        BigInt b = new BigInt();
        b.num.add(2);
        b.num.add(3); // 1000002
        b.num.add(76); // 1000002
        b.neg = true;
        BigInt ret = a.add(b);
        System.out.println(ret);
    }
    /*
    pos + pos -> test carry
    neg + neg -> test neg carry
    pos + neg -> result is neg 
    pos + neg -> result is pos
    test Zero -> 
    */

    
    static class BigInt {
        boolean neg;
        List<Integer> num;
        public BigInt() {
            neg = false;
            num=new ArrayList<>();
        }
        public String toString() {
            StringBuilder sb = new StringBuilder();
            String maxIntString = Integer.MAX_VALUE + "";
            if(neg) {
                sb.append('-');
            }
            for(int i = num.size()-1;i>=0;i--) {
                String numString = num.get(i)+"";
                if(i!=num.size()-1) {
                    for(int j = 0;j<maxIntString.length() - numString.length();j++) {
                        sb.append('0');
                    }
                }
                sb.append(numString);
            }
            return sb.toString();
        }
        private boolean isGreater(BigInt b) {
            if(num.size() != b.num.size()) {
                return num.size() > b.num.size();
            }
            for(int i =num.size()-1;i>=0;i--) {
                if(b.num.get(i) != num.get(i)) {
                    return num.get(i)>=b.num.get(i);
                }
            }
            return true;
        }
        public BigInt add(BigInt b) {
            BigInt ret =new BigInt();
            boolean isNeg = isGreater(b)?this.neg:b.neg;
            long sum = 0, carry = 0;
            int n =num.size(), m = b.num.size();
            for(int i = 0;i<Math.max(n,m);i++) {
                sum = (neg?-1:1)*(i<n?num.get(i):0) + carry + (b.neg?-1:1) * (i<m?b.num.get(i):0);
                carry = sum/ Integer.MAX_VALUE;
                sum = sum % Integer.MAX_VALUE;
                if(isNeg ^ (sum<0) && sum != 0) {
                    sum = (long)Integer.MAX_VALUE - Math.abs(sum);
                    carry = isNeg ? 1: -1;
                }
                ret.num.add((int)Math.abs(sum));
            }
            if(carry != 0) {
                ret.num.add((int)Math.abs(carry));
            }
            ret.neg = isNeg;
            while(ret.num.size()>0 && ret.num.get(ret.num.size()-1) == 0) {
                ret.num.remove(ret.num.size()-1);
            }
            if(ret.num.size() == 0) {
                ret.num.add(0);
                ret.neg = false;
            }
            return ret;
        }
        public BigInt addPos(BigInt b) {
            BigInt ret = new BigInt();
            long sum = 0, carry = 0;
            int n = num.size(), m = b.num.size();
            for(int i = 0;i<Math.max(n,m);i++) {
                sum = (i<n?num.get(i):0) + carry + (i<m?b.num.get(i):0);
                carry = sum / Integer.MAX_VALUE;
                sum = sum % Integer.MAX_VALUE;
                ret.num.add((int)sum);
            }
            if(carry > 0) {
                ret.num.add((int)carry);
            }
            return ret;
        }
    }
}


//===================================
public class BigInt {
	List<Integer> num;
	boolean neg;
	public BigInt() {
		num = new ArrayList<Integer>();
		neg= false;
	}
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
	}
	@Test
	public void test() {
		System.out.println(-90 % 100);
//		System.out.println(-90 % 100);
	}
	@Test
	public void addPositiveNumbersTest() {
		BigInt a = new BigInt();
		a.num.add(78);
		a.num.add(1);
		BigInt b = new BigInt();
		b.num.add(64); // 0 789
		BigInt c = BigInt.add(a, b);
		System.out.println(c);
	}
	@Test
	public void addNegNumbersTest() {
		BigInt a = new BigInt();
		a.num.add(78);
		a.num.add(1);
		a.neg = true;
		BigInt b = new BigInt();
		b.num.add(64); // 0 789
		b.neg=true;
		BigInt c = BigInt.add(a, b);
		System.out.println(c);
	}
	@Test
	public void addPositiveAndNegativeNumber() {
		BigInt a = new BigInt();
		a.num.add(35);
		a.num.add(1);
		a.neg = true;
		BigInt b = new BigInt();
		b.num.add(64); // 0 789
		b.neg=false;
		BigInt c = BigInt.add(a, b);
		System.out.println(c);
	} 
	/* test case:
	 * 1. test both positive numbers and carry
	 * 2. test both negative numbers and carry
	 * 3. test positive and negative number test borrow, positive greater
	 * 4. test positive and negative number test borrow, negative greater
	 * 5. test zero 
	 * 
	 * */
	@Test
	public void carryNumberTest() {
		BigInt a = new BigInt();
		a.num.add(35);
		a.num.add(1);
		a.neg = true;
		BigInt b = new BigInt();
		b.num.add(Integer.MAX_VALUE-1); // 0 789
		b.neg=true;
		BigInt c = BigInt.add(a, b);
		System.out.println(c);
	}
	@Test
	public void posNegZeroTest() {
		BigInt a = new BigInt();
		a.num.add(35);
		a.num.add(17);
		a.num.add(23);
		a.neg = false;
		BigInt b = new BigInt();
		b.num.add(35);
		b.num.add(17);
		b.num.add(23);
		b.neg=true;
		BigInt c = BigInt.add(a, b);
		System.out.println(c);
	}
	@Test
	public void posNegZero2Test() {
		BigInt a = new BigInt();
		a.num.add(34);
		a.num.add(17);
		a.num.add(23);
		a.neg = false;
		BigInt b = new BigInt();
		b.num.add(35);
		b.num.add(17);
		b.num.add(23);
		b.neg=true;
		BigInt c = BigInt.add(a, b);
		System.out.println(c);
	}
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append(neg?'-':"");
		String maxIntString = Integer.MAX_VALUE + "";
		for(int i = num.size() -1 ;i>=0;i--) {
			if(i<num.size()-1) {
				String t = num.get(i) + "";
				for(int j=0;j<maxIntString.length() - t.length();j++) {
					sb.append('0');
				}
			}
			sb.append(num.get(i));
		}
		return sb.toString();
	}
	static boolean isGreater(BigInt a, BigInt b) {
		if(a.num.size() != b.num.size()) {
			return a.num.size() > b.num.size();
		}
		for(int i = a.num.size()-1;i>=0;i--) {
			if(b.num.get(i) !+ a.num.get(i)) {
				return a.num.get(i)>=b.num.get(i);
			}
		}
		return true;
	}
	
	static BigInt add(BigInt a, BigInt b) {
		BigInt ret = new BigInt();
		long carry = 0, sum = 0;
		int n = a.num.size(), m = b.num.size();
		boolean neg = false;
		if(isGreater(a, b)) {
			neg = a.neg;
		} else {
			neg = b.neg;
		}
		for(int i = 0;i<Math.max(n, m);i++) {
			sum = (a.neg?-1:1) * (i<n?a.num.get(i):0) + carry + (i<m?b.num.get(i):0) * (b.neg?-1:1);
			carry = sum / Integer.MAX_VALUE;
			sum = sum % Integer.MAX_VALUE;
			if(neg ^ (sum<0) && sum!=0) {
				sum = (long)Integer.MAX_VALUE - Math.abs(sum);
				carry = neg?1:-1;
			}
			ret.num.add((int)Math.abs(sum));
		}
		if(carry > 0) {
			ret.num.add((int)Math.abs(carry));
		}
		while(ret.num.size() > 0 && ret.num.get(ret.num.size()-1) == 0) {
			ret.num.remove(ret.num.size()-1);
		}
		if(ret.num.size() == 0) {
			ret.num.add(0);
			ret.neg = false;
		} else {
			ret.neg = neg;
		}
		return ret;
	}
}
