/*

(2, 3)->(3, 5)->(1, 7). 那么返回2的概率是（3／15）， 3的概率是：（5／15），1 的概率
*/
public class WeightedRandomNumber {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Pair p1 = new Pair(1,2.13);
		Pair p2 = new Pair(2,3.45);
		Pair p3 = new Pair(3,7.64);
		List<Pair> list = new LinkedList<Pair>();
		list.add(p1);
		list.add(p2);
		list.add(p3);
		WeightedRandomNumber r = new WeightedRandomNumber(list);
		Map<Integer,Integer> map =  new HashMap<Integer,Integer>();
		for(int i = 0; i< 100000; i++) {
			int next = r.getRandomNumber();
			if(!map.containsKey(next)) {
				map.put(next, 1);
			}
			else{
				map.put(next, map.get(next) + 1);
			}
		}
		for(Integer key : map.keySet()) {
			System.out.println(key + " : " + (map.get(key) / 100000.0));
		}
		double tot = 0.0; 
		for(int i = 0; i < list.size(); i++) {
			tot += list.get(i).weight;
		}
		for(int i = 0; i < list.size(); i++) {
			System.out.print((list.get(i).weight / tot) + " ");
		}
	}
	ArrayList<Double> weights;
	ArrayList<Integer> nums;
	Random random;
	double weight;
	public WeightedRandomNumber(List<Pair> list) {
		if(list == null || list.size() == 0) {
			throw new RuntimeException("Invalid input");
		}
	    nums = new ArrayList<Integer>();
	    weights = new ArrayList<Double>();
	    weight = 0;
	    for(Pair pair : list){
	    	if(pair.weight < 0) {
	    		throw new RuntimeException("Invalid weight");
	    	}
	    	nums.add(pair.val);
	    	weight += pair.weight;
	    	weights.add(weight);
	    }
	    for(int i = 0; i < weights.size(); i++) {
	    	weights.set(i, weights.get(i) / weight);
	    }
	    random = new Random();
	  }
	  public int getRandomNumber(){
	    double next = random.nextDouble();
	    int s = 0, e = weights.size() - 1, m = 0;
	    while(s < e) { // binary search for the number
	      m = s + ((e - s) >> 1);
	      if(weights.get(m) > next) {
	        if(m == 0 || weights.get(m -1) <= next){
	          return nums.get(m);
	        }
	        else {
	          e = m - 1;
	        }
	      }
	      else {
	        s = m + 1;
	      }
	    }
	    return nums.get(e);
	  }
}
class Pair{
	int val;
	double weight;
	public Pair(int val, double weight){
		this.weight = weight;
		this.val = val;
	}
}
