/*
给一个数组，A,B轮流从头尾处选出一个数字，求当B使用（1）贪心和（2）最优策略时，
A能取到所有数字之和最大。我使用的recursive写的，
优化用的是hash 存储从子数组（i, j）上能得到的最优解。写了几个test跑过了。

*/
int maxSum(int[] a) {
	//validate
	int n = a.length;
	int[][] dp = new int[n][n];
	int[][] sum = new int[n][n];
	for(int i = 0;i<n;i++) {
		dp[i][i] = a[i][i];
		sum[i][i] = a[i][i];
	}
	for(int l = 1;l<n;l++) {
		for(int i =0 ;i<n-l;i++) {
			sum[i][i+l] = sum[i][i+l-1] + a[i+l];
			dp[i][i+l] = Math.max(dp[i][i] + sum[i+1][i+l] - dp[i+1][i+l], dp[i+l][i+l] + sum[i][i+l-1] - dp[i][i+l-1]); // max 
			if(l%2==0) {//even
				dp[i][i+l] = dp[i][i] > dp[i+l][i+l] ? dp[i][i] + sum[i+1][i+l] - dp[i+1][i+l] : dp[i+l][i+l] + sum[i][i+l-1] - dp[i][i+l-1];
			}
		}
	}
	return dp[0][n-1];
}
