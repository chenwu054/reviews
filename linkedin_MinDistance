/*
min distance solution I and II

*/
public class MinDistance {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		String[] words = {"abc","abe","abc","ab","abe","abc","ab","ab"};
		int ret =shortestDistance(words, "ab", "ab");
//		System.out.println(ret);
		MinDistance minD = new MinDistance(words);
		ret = minD.minDistance("abc", "abe");
		System.out.println(ret);
	}
	Map<String, List<Integer>> map;
	public MinDistance(String[] strs) {
		if(strs == null || strs.length == 0) {
			throw new RuntimeException("Invalid Input");
		}
		map = new HashMap<String, List<Integer>>();
		for(int i = 0; i < strs.length; i++) {
			if(!map.containsKey(strs[i])) {
				map.put(strs[i], new ArrayList<Integer>());
			}
			map.get(strs[i]).add(i);
		}
	}
	public int minDistance(String word1, String word2) {
		if(word1 == null || word2 == null || word1.length() == 0 || word2.length() == 0) {
			throw new RuntimeException("Invalid Input");
		}
		if(!map.containsKey(word1) || !map.containsKey(word2)) {
			return -1;
		}
		List<Integer> list1 = map.get(word1);
		List<Integer> list2 = map.get(word2);
		int i = 0, j = word1.equals(word2) ? 1 : 0;
		int minDistance = -1;
		while(i < list1.size() && j < list2.size()) {
			if(list1.get(i) == list2.get(j)) {
				i++;
				continue;
			}
			minDistance = minDistance > 0 ? Math.min(minDistance, Math.abs(list2.get(j) - list1.get(i))) : Math.abs(list2.get(j) - list1.get(i));
			if(list1.get(i) < list2.get(j)) {
				i++;
			}
			else {
				j++;
			}
		}
		return minDistance; 
	}
	
	public static int shortestDistance(String[] a, String word1, String word2) {
		if(a == null || a.length < 2 || word1 == null || word2 == null || word1.length() == 0 || word2.length() == 0) {
			throw new RuntimeException("Invalid Input");
		}
//		if(word1.equals(word2)) {
//			return 0; // ?
//		}
		int idx1 = -1, idx2 = -1, minDistance = -1;
		for(int i = 0; i < a.length; i++) {
			if(a[i].equals(word1)) {
				if(word1.equals(word2) && idx1 >= 0) { // when word1 and word2 are the same
					minDistance = minDistance > 0 ? Math.min(i - idx1, minDistance) : i - idx1;
				}
				idx1 = i;
				if(idx2 >= 0) {
					minDistance = minDistance > 0 ? Math.min(minDistance, idx1 - idx2) : idx1 - idx2;
				}
			}
			else if(a[i].equals(word2)) {
				idx2 = i;
				if(idx1 >= 0) {
					minDistance = minDistance > 0 ? Math.min(minDistance, idx2 - idx1) : idx2 - idx1;
				}
			}
		}
		return minDistance > 0 ? minDistance : -1;
	}
}
