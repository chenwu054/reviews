/*

*/
public class Solution {
    public int romanToInt(String s) {
        if(s == null || s.length() == 0) {
            return 0;
        }
        Map<Character, Integer> map = new HashMap<Character, Integer>();
        map.put('I', 1);
        map.put('V', 5);
        map.put('X', 10);
        map.put('L', 50);
        map.put('C', 100);
        map.put('D', 500);
        map.put('M', 1000);
        int ret = 0, tot = 0, last = 0;
        for(int i = 0; i < s.length(); i++) {
            char ch = s.charAt(i);
            int cur = map.get(ch);
            if(cur < last) {
                ret += tot;
                tot = cur;
            } else if(last == cur) {
                tot += cur;
            } else {
                tot = cur - tot;
            }
            last = cur;
        }
        ret += tot;
        return ret;
    }
}

public class Solution {
    public String intToRoman(int num) {
        char[] ones = {'I','X','C','M'};
        char[] fives = {'V','L','D',' '};
        StringBuilder sb = new StringBuilder();
        String str = num + "";
        while(str.length() < 4) {
            str = "0" + str;
        }
        for(int i = 0; i < 4; i++) {
            int ch = str.charAt(i) - '0';
            if(ch == 9) {
                sb.append(ones[ones.length - i - 1]).append(ones[ones.length - i]);
            } else if(ch == 4) {
                sb.append(ones[ones.length - i - 1]).append(fives[fives.length - i - 1]);
            } else {
                if(ch >= 5) {
                    sb.append(fives[fives.length - i - 1]);
                    ch = ch - 5;
                }
                while(ch > 0) {
                    sb.append(ones[ones.length - i - 1]);
                    ch = ch - 1;
                }
            }
        }
        return sb.toString();
    }
}
